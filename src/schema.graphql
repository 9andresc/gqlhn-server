type Query {
  # Links
  feed(filter: String, first: Int, skip: Int, orderBy: LinkOrderBy): [Link!]!
}

type Mutation {
  # Authentication
  signin(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String!, password: String!): AuthPayload
  # Links
  post(url: String!, description: String!): Link!
  # Votes
  vote(linkId: ID!): Vote
}

type Subscription {
  # Links
  newLink: Link
  # Votes
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type Link {
  id: ID!
  description: String!
  postedBy: User
  url: String!
  votes: [Vote!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  votes: [Vote!]!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

enum LinkOrderBy {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}
